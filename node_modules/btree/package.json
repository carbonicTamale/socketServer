{
  "name": "btree",
  "version": "1.0.1",
  "author": {
    "name": "mike andrews",
    "email": "mra@xoba.com",
    "url": "http://MichaelRaskinAndrews.com"
  },
  "homepage": "https://github.com/mrallc/btree",
  "description": "asynchronous copy-on-write btree",
  "scripts": {
    "start": "node simple.js"
  },
  "dependencies": {
    "underscore": "1.4.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mrallc/btree.git"
  },
  "bugs": {
    "url": "http://github.com/mrallc/btree/issues",
    "mail": "mra@xoba.com"
  },
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://github.com/mrallc/btree/raw/master/LICENSE-2.0"
    }
  ],
  "keywords": [
    "btree",
    "async",
    "copy-on-write",
    "cow",
    "asynchronous",
    "database",
    "big data",
    "b-tree",
    "data structure"
  ],
  "engine": {
    "node": ">=0.8.0"
  },
  "readme": "### asynchronous copy-on-write b-tree in javascript\n\nsee http://en.wikipedia.org/wiki/B-tree for details on b-tree's. \nthey're a fundamental building-block of databases or \"big data,\" and one of the best\nand most powerful ways known to mankind for enabling random access\nto large structures.\n\nto install the b-tree code and then run a simple demo using node/npm.js @ https://npmjs.org/package/btree ---\n\n    npm install btree\n    npm start btree\n    \n\"asynchronous\" means that all methods require a callback and return\nnothing directly. in other words, this implementation is completely\nnon-blocking, event-driven, and thus naturally high-performance.\n\n\"copy-on-write\" (cow) means that the entire b-tree is a pure immutable value,\nrepresented by its root key. all mutations create a new root object;\ni.e., a new version three levels down in the b-tree creates new versions of nodes in\nthe upper levels as well, including creating the new root which\nreferences that change down below. \n\nthe two main methods are `add` and `scan`; `get` and `create` are\nreally just special cases. the b-tree relies on a\nkey/value store, the simplest example of which is included as `kv.js`.\n\nrun `simple.js` for an ultra-simple demo, and `demo.js` for a more\ninvolved one. \n\nbug reports and pull requests will be welcomed! thanks in advance.\n\ninitially inspired by Justin Wetherell's java code at\nhttp://code.google.com/p/java-algorithms-implementation/\n\n",
  "_id": "btree@1.0.1",
  "dist": {
    "shasum": "920113e9ef9582f26256c0960a01320143c9ea1a",
    "tarball": "http://registry.npmjs.org/btree/-/btree-1.0.1.tgz"
  },
  "_npmVersion": "1.1.62",
  "_npmUser": {
    "name": "mra",
    "email": "mra@xoba.com"
  },
  "maintainers": [
    {
      "name": "mra",
      "email": "mra@xoba.com"
    }
  ],
  "directories": {},
  "_shasum": "920113e9ef9582f26256c0960a01320143c9ea1a",
  "_resolved": "https://registry.npmjs.org/btree/-/btree-1.0.1.tgz",
  "_from": "btree@*"
}
